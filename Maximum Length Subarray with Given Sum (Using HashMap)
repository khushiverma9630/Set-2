#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
    int nums[] = {5, 6, -5, 5, 3, 5, 3, -2, 0};
    int target = 8;
    int n = sizeof(nums) / sizeof(nums[0]);
    unordered_map<int, int> prefixSumMap;
    int sum = 0, maxLength = 0, startIndex = 0;

    for (int i = 0; i < n; i++) {
        sum += nums[i];

        if (sum == target) {
            maxLength = i + 1;
            startIndex = 0;
        }

        if (prefixSumMap.find(sum - target) != prefixSumMap.end()) {
            if (maxLength < i - prefixSumMap[sum - target]) {
                maxLength = i - prefixSumMap[sum - target];
                startIndex = prefixSumMap[sum - target] + 1;
            }
        }

        if (prefixSumMap.find(sum) == prefixSumMap.end()) {
            prefixSumMap[sum] = i;
        }
    }

    cout << "Max Length Subarray with sum " << target << ": ";
    for (int i = startIndex; i < startIndex + maxLength; i++) {
        cout << nums[i] << " ";
    }
    cout << endl;

    return 0;
}
